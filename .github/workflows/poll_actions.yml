name: Poll External Repo Actions

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes; adjust as needed (GitHub cron format)
  workflow_dispatch:  # Allows manual trigger for testing

jobs:
  poll-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Poll GitHub API for workflow runs
        id: poll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Optional; not needed for public repos
        run: |
          # Target repo details
          REPO_OWNER="FEX-Emu"
          REPO_NAME="FEX"
          
          # Export to GitHub env for later steps
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          # Fetch repo details for icon
          REPO_INFO=$(curl -s -f "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}")
          REPO_ICON=$(echo "$REPO_INFO" | jq -r '.owner.avatar_url')
          echo "repo_icon=$REPO_ICON" >> $GITHUB_OUTPUT
          
          # Fetch recent runs
          API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?per_page=1&status=completed"
          RUNS=$(curl -s -f "$API_URL")
          
          # Check for API errors
          if echo "$RUNS" | jq -e '.message? == "Not Found"' >/dev/null; then
            echo "Error: Repo ${REPO_OWNER}/${REPO_NAME} not found."
            exit 1
          fi
          
          RUNS_COUNT=$(echo "$RUNS" | jq '.workflow_runs | length')
          if [ "$RUNS_COUNT" -gt 0 ]; then
            # Extract run and branch details
            RUN_BRANCH=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_branch')
            RUN_URL=$(echo "$RUNS" | jq -r '.workflow_runs[0].html_url')
            RUN_STATUS=$(echo "$RUNS" | jq -r '.workflow_runs[0].conclusion')
            RUN_STATUS_UPPER=$(echo "$RUN_STATUS" | tr '[:lower:]' '[:upper:]')
            FULL_SHA=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_commit.id')
            
            # Set outputs (single-line only)
            echo "run_branch=$RUN_BRANCH" >> $GITHUB_OUTPUT
            echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
            echo "run_status=$RUN_STATUS_UPPER" >> $GITHUB_OUTPUT
            echo "full_sha=$FULL_SHA" >> $GITHUB_OUTPUT
            echo "run_id=1" >> $GITHUB_OUTPUT  # Dummy for if
            echo "New run detected on $RUN_BRANCH."
          else
            echo "run_id=none" >> $GITHUB_OUTPUT
            echo "No completed runs foundâ€”skipping notify."
          fi

      - name: Send Notification to Discord
        if: steps.poll.outputs.run_id != 'none'
        env:
          WEBHOOK_URL: ${{ secrets.FEXEMU_WEBHOOK }}
        run: |
          # Determine color (not used in text, but for future)
          COLOR=3447003
          if [ "${{ steps.poll.outputs.run_status }}" = "SUCCESS" ]; then
            COLOR=65280
          elif [ "${{ steps.poll.outputs.run_status }}" = "FAILURE" ]; then
            COLOR=16711680
          fi
          
          # Fetch recent commits on the branch (last 3)
          COMMITS=$(curl -s -f "https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/commits?sha=${{ steps.poll.outputs.run_branch }}&per_page=3")
          NUM_COMMITS=$(echo "$COMMITS" | jq '. | length')
          
          # Build commit list with jq (multi-line safe here)
          COMMIT_LIST=$(echo "$COMMITS" | jq -r \
            '"[\('${{ env.REPO_NAME }})-\('${{ steps.poll.outputs.run_branch }})\] \('${{ steps.poll.outputs.num_commits }}') new commits\n" + 
             [ .[] | " \(.sha[0:7]) \(.commit.message | split("\n")[0]) - \(.commit.author.name)" ] | join("\n") ')
          
          # Check if merge commit for PR detection
          COMMIT_MSG=$(echo "$COMMITS" | jq -r '.[0].commit.message')
          IS_MERGE=$(echo "$COMMIT_MSG" | grep -c "Merge pull request")
          PR_TEXT=""
          if [ "$IS_MERGE" -gt 0 ]; then
            PR_NUMBER=$(echo "$COMMIT_MSG" | sed -n 's/.*#\(.*\) from.*/\1/p')
            PR_TITLE=$(echo "$COMMIT_MSG" | sed -n 's/Merge pull request #.* from .* \(.*\)/\1/p')
            PR_TEXT="**[${{ env.REPO_NAME }} Pull request closed: #${PR_NUMBER} ${PR_TITLE}]**\n"
          fi
          
          # Full content
          CONTENT="${PR_TEXT}${COMMIT_LIST}"
          
          # Build JSON
          NOTIF_JSON='{
            "username": "GitHub",
            "avatar_url": "https://github.githubassets.com/images/modules/actions_dashboard/inverted-ghost.png",
            "content": "'"$CONTENT"'"
          }'
          
          # Send via curl
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$NOTIF_JSON" \
               "$WEBHOOK_URL"
          
          echo "Notification sent successfully!"
