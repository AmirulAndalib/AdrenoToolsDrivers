name: Poll External Repo Actions

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes; adjust as needed (GitHub cron format)
  workflow_dispatch:  # Allows manual trigger for testing

jobs:
  poll-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Poll GitHub API for workflow runs
        id: poll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Optional; not needed for public repos
        run: |
          # Target repo details
          REPO_OWNER="FEX-Emu"
          REPO_NAME="FEX"
          
          # Export to GitHub env for later steps
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          # Fetch repo details for icon
          REPO_INFO=$(curl -s -f "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}")
          REPO_ICON=$(echo "$REPO_INFO" | jq -r '.owner.avatar_url')
          echo "repo_icon=$REPO_ICON" >> $GITHUB_OUTPUT
          
          # Fetch recent runs
          API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?per_page=1&status=completed"  # Just the latest for notify
          RUNS=$(curl -s -f "$API_URL")
          
          # Check for API errors (e.g., 404 Not Found)
          if echo "$RUNS" | jq -e '.message? == "Not Found"' >/dev/null; then
            echo "Error: Repo ${REPO_OWNER}/${REPO_NAME} not found."
            exit 1
          fi
          
          # Get count and handle empty
          RUNS_COUNT=$(echo "$RUNS" | jq '.workflow_runs | length')
          if [ "$RUNS_COUNT" -gt 0 ]; then
            # Extract latest run details for embed
            RUN_NAME=$(echo "$RUNS" | jq -r '.workflow_runs[0].name')
            RUN_STATUS=$(echo "$RUNS" | jq -r '.workflow_runs[0].conclusion')
            RUN_STATUS_UPPER=$(echo "$RUN_STATUS" | tr '[:lower:]' '[:upper:]')
            RUN_ACTOR=$(echo "$RUNS" | jq -r '.workflow_runs[0].actor.login')
            RUN_ACTOR_ID=$(echo "$RUNS" | jq -r '.workflow_runs[0].actor.id')
            RUN_TIME=$(echo "$RUNS" | jq -r '.workflow_runs[0].created_at')
            RUN_URL=$(echo "$RUNS" | jq -r '.workflow_runs[0].html_url')
            RUN_ID=$(echo "$RUNS" | jq -r '.workflow_runs[0].id')
            COMMIT_MSG=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_commit.message // "No commit message"')
            COMMIT_SHA=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_commit.id // "No SHA"')
            COMMIT_AUTHOR=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_commit.author.name // "Unknown"')
            
            # Set outputs
            echo "run_name=$RUN_NAME" >> $GITHUB_OUTPUT
            echo "run_status=$RUN_STATUS_UPPER" >> $GITHUB_OUTPUT
            echo "run_actor=$RUN_ACTOR" >> $GITHUB_OUTPUT
            echo "run_actor_id=$RUN_ACTOR_ID" >> $GITHUB_OUTPUT
            echo "run_time=$RUN_TIME" >> $GITHUB_OUTPUT
            echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
            echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
            echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
            echo "New run detected: $RUN_NAME ($RUN_STATUS) by $RUN_ACTOR."
          else
            echo "run_id=none" >> $GITHUB_OUTPUT
            echo "No completed runs foundâ€”skipping notify."
          fi

      - name: Send Rich Embed to Discord
        if: steps.poll.outputs.run_id != 'none'
        env:
          WEBHOOK_URL: ${{ secrets.FEXEMU_WEBHOOK }}
        run: |
          # Build embed JSON with details
          COLOR=3447003  # Default blue
          if [ "${{ steps.poll.outputs.run_status }}" = "SUCCESS" ]; then
            COLOR=65280  # Green
          elif [ "${{ steps.poll.outputs.run_status }}" = "FAILURE" ]; then
            COLOR=16711680  # Red
          fi
          
          EMBED_JSON='{
            "username": "GitHub Actions Bot",
            "embeds": [
              {
                "author": {
                  "name": "FEX-Emu/FEX",
                  "icon_url": "${{ steps.poll.outputs.repo_icon }}"
                },
                "title": "${{ steps.poll.outputs.run_name }}",
                "description": "**Status:** ${{ steps.poll.outputs.run_status }}\n**Triggered by:** ${{ steps.poll.outputs.run_actor }}\n**Time:** ${{ steps.poll.outputs.run_time }}\n**Run ID:** ${{ steps.poll.outputs.run_id }}\n**Commit:** `${{ steps.poll.outputs.commit_sha }}` by ${{ steps.poll.outputs.commit_author }}\n**Message:** ${{ steps.poll.outputs.commit_msg }}",
                "url": "${{ steps.poll.outputs.run_url }}",
                "color": '$COLOR',
                "footer": {
                  "text": "Check the Actions tab for full logs"
                },
                "thumbnail": {
                  "url": "https://avatars.githubusercontent.com/u/${{ steps.poll.outputs.run_actor_id }}?v=4"
                }
              }
            ]
          }'
          
          # Send via curl
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$EMBED_JSON" \
               "$WEBHOOK_URL"
          
          echo "Embed sent successfully!"
