name: Poll External Repo Actions

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes; adjust as needed (GitHub cron format)
  workflow_dispatch:  # Allows manual trigger for testing

jobs:
  poll-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Poll GitHub API for workflow runs
        id: poll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Optional; not needed for public repos
        run: |
          # Target repo details
          REPO_OWNER="FEX-Emu"
          REPO_NAME="FEX"
          
          # Export to GitHub env for later steps
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          # Fetch repo details for icon
          REPO_INFO=$(curl -s -f "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}")
          REPO_ICON=$(echo "$REPO_INFO" | jq -r '.owner.avatar_url')
          echo "repo_icon=$REPO_ICON" >> $GITHUB_OUTPUT
          
          # Fetch recent runs
          API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?per_page=1&status=completed"
          RUNS=$(curl -s -f "$API_URL")
          
          # Check for API errors
          if echo "$RUNS" | jq -e '.message? == "Not Found"' >/dev/null; then
            echo "Error: Repo ${REPO_OWNER}/${REPO_NAME} not found."
            exit 1
          fi
          
          RUNS_COUNT=$(echo "$RUNS" | jq '.workflow_runs | length')
          if [ "$RUNS_COUNT" -gt 0 ]; then
            # Extract run and branch details
            RUN_BRANCH=$(echo "$RUNS" | jq -r '.workflow_runs[0].head_branch')
            RUN_URL=$(echo "$RUNS" | jq -r '.workflow_runs[0].html_url')
            RUN_STATUS=$(echo "$RUNS" | jq -r '.workflow_runs[0].conclusion')
            RUN_STATUS_UPPER=$(echo "$RUN_STATUS" | tr '[:lower:]' '[:upper:]')
            
            # Fetch recent commits on the branch (last 3 for demo; adjust per_page)
            COMMITS=$(curl -s -f "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/commits?sha=${RUN_BRANCH}&per_page=3")
            NUM_COMMITS=$(echo "$COMMITS" | jq '. | length')
            
            # Use jq to build the commit list string (avoids bash escaping issues)
            COMMIT_LIST=$(echo "$COMMITS" | jq -r --arg repo "$REPO_NAME" --arg branch "$RUN_BRANCH" --arg num "$NUM_COMMITS" \
              '"[\($repo)-\($branch)] \($num) new commits\n" + ( [ .[] | " \(.sha[0:7]) \(.commit.message | split("\n")[0]) - \(.commit.author.name)" ] | join("\n") )')
            
            # Set outputs
            echo "commit_list=$COMMIT_LIST" >> $GITHUB_OUTPUT
            echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
            echo "run_status=$RUN_STATUS_UPPER" >> $GITHUB_OUTPUT
            echo "run_id=1" >> $GITHUB_OUTPUT  # Dummy for if
            echo "New run detected with $NUM_COMMITS commits on $RUN_BRANCH."
          else
            echo "run_id=none" >> $GITHUB_OUTPUT
            echo "No completed runs foundâ€”skipping notify."
          fi

      - name: Send Notification to Discord
        if: steps.poll.outputs.run_id != 'none'
        env:
          WEBHOOK_URL: ${{ secrets.FEXEMU_WEBHOOK }}
        run: |
          # Build payload with content (plain text like GitHub App notification)
          NOTIF_JSON='{
            "username": "GitHub",
            "avatar_url": "https://github.githubassets.com/images/modules/actions_dashboard/inverted-ghost.png",
            "content": "**${{ steps.poll.outputs.commit_list }}**"
          }'
          
          # Send via curl
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$NOTIF_JSON" \
               "$WEBHOOK_URL"
          
          echo "Notification sent successfully!"
