name: Poll FEX-Emu/FEX Workflows

on:
  schedule:
    - cron: "*/10 * * * *" # Every 10 minutes
  workflow_dispatch:

jobs:
  poll:
    runs-on: ubuntu-latest
    steps:
      - name: Download previous notified runs artifact
        uses: actions/download-artifact@v4
        with:
          name: notified-runs
          path: .cache
        continue-on-error: true

      - name: Prepare notified runs state
        run: |
          set -euo pipefail
          STATE_FILE=".cache/notified_runs.txt"
          mkdir -p .cache
          if [ ! -f "$STATE_FILE" ]; then
            touch "$STATE_FILE"
          fi
          echo "Previously notified runs:"
          cat "$STATE_FILE"

      - name: Fetch recent workflow runs
        run: |
          set -euo pipefail
          curl -s -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/FEX-Emu/FEX/actions/runs?per_page=10&status=success \
               > recent_runs.json

      - name: Identify new runs
        id: check
        run: |
          set -euo pipefail
          STATE_FILE=".cache/notified_runs.txt"
          NEW_IDS=""

          # Use while-read instead of mapfile or process substitution
          jq -r '.workflow_runs[] | select(.conclusion=="success") | .id' recent_runs.json | while read -r run_id; do
            if ! grep -qx "$run_id" "$STATE_FILE"; then
              NEW_IDS="$NEW_IDS $run_id"
            fi
          done

          # Export NEW_IDS for GitHub Actions
          if [ -z "$NEW_IDS" ]; then
            echo "already_notified=true" >> $GITHUB_ENV
          else
            echo "already_notified=false" >> $GITHUB_ENV
            echo "new_runs=$NEW_IDS" >> $GITHUB_ENV

      - name: Send GitHub-style Discord embeds
        if: env.already_notified == 'false'
        run: |
          set -euo pipefail
          STATE_FILE=".cache/notified_runs.txt"
          NEW_RUNS="${{ env.new_runs }}"

          if [ -n "$NEW_RUNS" ]; then
            for run_id in $NEW_RUNS; do
              run_data=$(jq -r --arg id "$run_id" '.workflow_runs[] | select(.id==$id|tonumber)' recent_runs.json)
              url=$(echo "$run_data" | jq -r '.html_url')
              workflow_name=$(echo "$run_data" | jq -r '.name')
              branch=$(echo "$run_data" | jq -r '.head_branch')
              actor=$(echo "$run_data" | jq -r '.head_commit.author.name')
              status_icon="ðŸŸ¢"
              color=3066993

              message=$(jq -n \
                --arg title "$workflow_name" \
                --arg url "$url" \
                --arg branch "$branch" \
                --arg actor "$actor" \
                --arg icon "$status_icon" \
                --argjson color "$color" \
                '{
                  username: "GitHub Actions",
                  embeds: [{
                    title: ($icon + " " + $title),
                    url: $url,
                    description: "Workflow succeeded on branch `" + $branch + "` by " + $actor,
                    color: $color,
                    footer: {text: "FEX-Emu/FEX Actions"}
                  }]
                }')

              curl -H "Content-Type: application/json" -X POST -d "$message" ${{ secrets.FEXEMU_WEBHOOK }}
              echo "$run_id" >> "$STATE_FILE"
            done
          fi

      - name: Upload updated notified runs artifact
        if: env.already_notified == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: notified-runs
          path: .cache/notified_runs.txt
