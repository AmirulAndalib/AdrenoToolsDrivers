```yaml
name: Monitor FEX-Emu/FEX Actions

on:
  schedule:
    - cron: '*/10 * * * *'

permissions:
  contents: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create and run monitor script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FEXEMU_WEBHOOK: ${{ secrets.FEXEMU_WEBHOOK }}
        run: |
          cat > monitor.py << 'EOF'
          import json
          import os
          import requests
          import subprocess
          from datetime import datetime

          # Configuration
          OWNER = 'FEX-Emu'
          REPO = 'FEX'
          API_BASE = 'https://api.github.com/repos/{}/{}/'.format(OWNER, REPO)
          STATE_FILE = '.github/state.json'
          WEBHOOK = os.environ['FEXEMU_WEBHOOK']
          TOKEN = os.environ['GITHUB_TOKEN']
          HEADERS = {'Authorization': 'token {}'.format(TOKEN), 'User-Agent': 'FEX-Monitor'}

          # Load last notified run ID
          last_id = 0
          if os.path.exists(STATE_FILE):
              with open(STATE_FILE, 'r') as f:
                  data = json.load(f)
                  last_id = data.get('last_run_id', 0)

          old_last_id = last_id
          new_run_ids = []

          # Fetch recent successful workflow runs (latest first)
          runs_url = API_BASE + 'actions/runs'
          params = {
              'per_page': 10,
              'status': 'success',
              'sort': 'timestamp',
              'direction': 'desc'
          }
          response = requests.get(runs_url, params=params, headers=HEADERS)
          response.raise_for_status()
          workflow_runs = response.json().get('workflow_runs', [])

          # Process each new run
          for run in workflow_runs:
              run_id = run['id']
              if run_id <= last_id:
                  break  # Since sorted desc, no more new ones

              # Get commit details
              commit_url = API_BASE + 'commits/{}'.format(run['head_sha'])
              commit_response = requests.get(commit_url, headers=HEADERS)
              commit_response.raise_for_status()
              commit_data = commit_response.json()

              commit_message = commit_data['commit']['message'].split('\n')[0] if commit_data['commit']['message'] else 'No message'
              author_login = commit_data.get('author', {}).get('login', 'Unknown')
              head_branch = run.get('head_branch', 'Unknown')

              # Craft Discord embed (GitHub-style)
              embed = {
                  'title': '{} Succeeded'.format(run['name']),
                  'url': run['html_url'],
                  'description': commit_message,
                  'color': 65280,  # Green
                  'fields': [
                      {'name': 'Branch', 'value': head_branch, 'inline': True},
                      {'name': 'Author', 'value': author_login, 'inline': True},
                      {'name': 'Updated', 'value': run['updated_at'], 'inline': True}
                  ],
                  'timestamp': run['updated_at']
              }
              payload = {'embeds': [embed]}

              # Send to Discord webhook
              webhook_response = requests.post(WEBHOOK, json=payload)
              webhook_response.raise_for_status()

              new_run_ids.append(run_id)
              print('Notified for run ID: {}'.format(run_id))

          # Update last ID to the highest new one
          if new_run_ids:
              last_id = max(new_run_ids)

          # Save state
          os.makedirs(os.path.dirname(STATE_FILE), exist_ok=True)
          with open(STATE_FILE, 'w') as f:
              json.dump({'last_run_id': last_id}, f, indent=2)

          # Commit and push if changed
          if last_id > old_last_id:
              subprocess.run(['git', 'config', 'user.name', 'github-actions[bot]'], check=True)
              subprocess.run(['git', 'config', 'user.email', 'github-actions[bot]@users.noreply.github.com'], check=True)
              subprocess.run(['git', 'add', STATE_FILE], check=True)
              subprocess.run(['git', 'commit', '-m', 'Update last notified run ID: {}'.format(last_id)], check=True)
              subprocess.run(['git', 'push'], check=True)
              print('Updated state and pushed commit')
          else:
              print('No new successful runs to notify')
          EOF

          python3 monitor.py
```
