```yaml
name: Monitor FEX-Emu/FEX Actions

on:
  schedule:
    - cron: '*/10 * * * *'

permissions:
  contents: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and notify new successful runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FEXEMU_WEBHOOK: ${{ secrets.FEXEMU_WEBHOOK }}
        run: |
          # Configuration
          OWNER="FEX-Emu"
          REPO="FEX"
          API_BASE="https://api.github.com/repos/${OWNER}/${REPO}/"
          STATE_FILE=".github/state.json"
          mkdir -p "$(dirname "$STATE_FILE")"

          # Headers
          HEADERS=("Authorization: token ${GITHUB_TOKEN}" "User-Agent: FEX-Monitor" "Accept: application/vnd.github.v3+json")

          # Load last notified run ID
          if [ -f "$STATE_FILE" ]; then
            LAST_ID=$(jq -r '.last_run_id // 0' "$STATE_FILE")
          else
            LAST_ID=0
          fi

          OLD_LAST_ID=$LAST_ID
          UPDATED=false

          # Fetch recent successful workflow runs (latest first)
          RUNS_URL="${API_BASE}actions/runs?per_page=10&status=success&sort=timestamp&direction=desc"
          RUNS_RESPONSE=$(curl -s -H "${HEADERS[0]}" -H "${HEADERS[1]}" -H "${HEADERS[2]}" "$RUNS_URL")
          WORKFLOW_RUNS=$(echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[]? | select(.id > '"$LAST_ID"') | .id')

          # Process each new run
          echo "$WORKFLOW_RUNS" | while read -r RUN_ID; do
            # Get run details
            RUN_DETAILS_URL="${API_BASE}actions/runs/${RUN_ID}"
            RUN_DETAILS=$(curl -s -H "${HEADERS[0]}" -H "${HEADERS[1]}" -H "${HEADERS[2]}" "$RUN_DETAILS_URL" | jq '.')

            RUN_NAME=$(echo "$RUN_DETAILS" | jq -r '.name')
            RUN_URL=$(echo "$RUN_DETAILS" | jq -r '.html_url')
            HEAD_SHA=$(echo "$RUN_DETAILS" | jq -r '.head_sha')
            HEAD_BRANCH=$(echo "$RUN_DETAILS" | jq -r '.head_branch // "Unknown"')
            UPDATED_AT=$(echo "$RUN_DETAILS" | jq -r '.updated_at')

            # Get commit details
            COMMIT_URL="${API_BASE}commits/${HEAD_SHA}"
            COMMIT_DETAILS=$(curl -s -H "${HEADERS[0]}" -H "${HEADERS[1]}" -H "${HEADERS[2]}" "$COMMIT_URL" | jq '.')

            COMMIT_MESSAGE=$(echo "$COMMIT_DETAILS" | jq -r '.commit.message // "No message"' | head -1)
            AUTHOR_LOGIN=$(echo "$COMMIT_DETAILS" | jq -r '.author.login // "Unknown"')

            # Craft Discord embed JSON
            EMBED=$(jq -n \
              --arg title "${RUN_NAME} Succeeded" \
              --arg url "$RUN_URL" \
              --arg desc "$COMMIT_MESSAGE" \
              --arg branch "$HEAD_BRANCH" \
              --arg author "$AUTHOR_LOGIN" \
              --arg updated "$UPDATED_AT" \
              '{
                title: $title,
                url: $url,
                description: $desc,
                color: 65280,
                fields: [
                  {name: "Branch", value: $branch, inline: true},
                  {name: "Author", value: $author, inline: true},
                  {name: "Updated", value: $updated, inline: true}
                ],
                timestamp: $updated
              }')

            PAYLOAD=$(jq -n --argjson embed "$EMBED" '{embeds: [$embed]}')

            # Send to Discord webhook
            curl -s -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$FEXEMU_WEBHOOK"

            echo "Notified for run ID: $RUN_ID"
            if [ "$LAST_ID" -lt "$RUN_ID" ]; then
              LAST_ID="$RUN_ID"
              UPDATED=true
            fi
          done

          # Update state if changed
          if [ "$UPDATED" = true ]; then
            echo "{\"last_run_id\": $LAST_ID}" > "$STATE_FILE"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$STATE_FILE"
            git commit -m "Update last notified run ID: $LAST_ID"
            git push
            echo "Updated state and pushed commit"
          else
            echo "No new successful runs to notify"
          fi
```
